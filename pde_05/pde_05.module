<?php

/**
 * @file
 * Contains example code demonstrating topics covered in Chapter 5.
 */

// @ignore sniffer_squiz_commenting_poststatementcomment_found:file
// @ignore sniffer_commenting_inlinecomment_spacingafter:file
// @ignore sniffer_commenting_inlinecomment_invalidendchar:file

module_load_include('inc', 'pde', 'includes/tools');

/**
 * Implements hook_menu().
 */
function pde_05_menu() {
  pde_trace_funct();

  $items = array();

  $items['wrapper'] = array(
    'title' => 'Wrapper',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pde_05_form_wrapper_read'),
    'access callback' => TRUE,
  );

  $items['wrapper/%/%'] = array(
    'title' => 'Wrapper',
    'page callback' => 'pde_05_pcb_wrapper_read',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Form 'Wrapper read' constructor.
 */
function pde_05_form_wrapper_read($form, &$form_state) {
  pde_trace_funct();

  $form['info'] = array(
    '#type' => 'item',
    '#title' => t('Plase create entities of available types first.'),
  );

  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Entity type'),
    '#options' => _pde_05_get_entity_select_options(),
    '#description' => t('Select entity type.'),
  );

  $form['id'] = array(
    '#type' => 'textfield',
    '#title' => t('Entity id'),
    '#maxlength' => 10,
    '#size' => 5,
    '#element_validate' => array('element_validate_number'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Read'),
  );

  return $form;
}


/**
 * Form 'Wrapper read' submit handler.
 */
function pde_05_form_wrapper_read_submit($form, &$form_state) {
  pde_trace_funct();

  $type = $form_state['values']['type'];
  $id = $form_state['values']['id'];

  $form_state['redirect'] = "wrapper/$type/$id";
}


/**
 * Page callback: read entity of given type and id via wrapper.
 */
function pde_05_pcb_wrapper_read($type = NULL, $id = NULL) {
  pde_trace_funct();

  if (!array_key_exists($type, entity_get_info())) {
    return 'Please use the following path: /wrapper/ENTITY/ID, for example /wrapper/user/1';
  }

  $wrapper = entity_metadata_wrapper($type, $id);
  dpm($wrapper->getPropertyInfo(), 'wrapper->getPropertyInfo()');
  dpm($wrapper->value(), 'wrapper->value()');
  return $output = '<pre>' . _pde_05_wrapper_read($type, $wrapper) . '</pre>';
}


/**
 * Dump properties and thier values of given entity wrapper.
 */
function _pde_05_wrapper_read($name, $wrapper, $level = 0, $stack = array()) {
  $output = '';

  // If loop return!
  if (_pde_05_wrapper_read_loop($wrapper, $stack)) {
    return str_pad('', $level) . 'LOOP</br>';
  }

  if ($wrapper instanceof EntityDrupalWrapper ||
      $wrapper instanceof EntityStructureWrapper ||
      $wrapper instanceof EntityListWrapper) {
    $output .= _pde_05_property_hdr($name, $wrapper, $level);

    // Check if the wrapped data exists. It may happen, that although wrapper
    // exists and can be iterated through its properties, the wrapped data
    // doesn't exist. Then $wrapper->value() throws exception.
    // It occurs for example if 'parent' property is not set for comment entity.
    if (is_object($wrapper->value()) ||
        is_array($wrapper->value())) {
      $output .= '</br>';
      foreach ($wrapper as $key => $property) {
        $output .= _pde_05_wrapper_read($key, $property, $level + 3, $stack);
      }
    }
    else {
      $output .= 'NULL</br>';
    }
  }
  elseif ($wrapper instanceof EntityValueWrapper) {
    $output .= _pde_05_property_hdr($name, $wrapper, $level);
    $output .= $wrapper->value(array('decode' => TRUE)) . '</br>';
  }
  else {
    $output .= _pde_05_property_hdr($name, $wrapper, $level);
    $output .= 'UNKNOWN</br>';
  }

  // dpm($output);
  return $output;
}


/**
 * Render common header.
 *
 * Helper of _pde_05_wrapper_read.
 */
function _pde_05_property_hdr($name, $wrapper, $level) {
  $output = str_pad('', $level) . $name . ' (' . get_class($wrapper) . ')';
  $output = str_pad($output, $level + 40);
  $output .= ': ';
  return $output;
}

/**
 * Catch the loops in resursive entity read algorithm.
 *
 * Helper of _pde_05_wrapper_read.
 * 'parent_all' property of taxonomy_term wrapper contains the entire term
 * path to the vocabulary root including the term itself. It leeds to endless
 * recursive loop. The function recognizes such situations.
 */
function _pde_05_wrapper_read_loop($wrapper, &$stack) {
  if ($wrapper instanceof EntityDrupalWrapper) {
    $entity = $wrapper->value();
    if (in_array($entity, $stack, TRUE)) {
      return TRUE;
    }

    $stack[] = $entity;
  }
  return FALSE;
}


/**
 * Create array of entities' labels keyed by entity type.
 *
 * The array is used to fill '#options' parameter of entity 'select' element
 * in forms.
 */
function _pde_05_get_entity_select_options() {
  $entities = entity_get_info();
  $options = array();
  foreach ($entities as $type => $data) {
    $options[$type] = $data['label'];
  }

  return $options;
}
