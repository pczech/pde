<?php

/**
 * @file
 * Contains example code demonstrating topics covered in Chapter 3.
 */

// @ignore sniffer_squiz_commenting_poststatementcomment_found:file
// @ignore sniffer_commenting_inlinecomment_spacingafter:file
// @ignore sniffer_commenting_inlinecomment_invalidendchar:file


module_load_include('inc', 'pde', 'includes/tools');


/**
 * Implements hook_menu().
 */
function pde_03_menu() {
  pde_trace_funct();

  $items = array();

  $items['filent'] = array(
    'title' => 'File entities',
    'page callback' => 'pde_03_pcb_filent_info',
    'access callback' => TRUE,
    'weight' => 1,
  );

  $items['filent/create/fa'] = array(
    'title' => 'Create by FAPI',
    'page callback' => 'pde_03_pcb_filent_create',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'weight' => 1,
  );

  $items['filent/create/ea'] = array(
    'title' => 'Create by EAPI',
    'page callback' => 'pde_03_pcb_filent_create',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'weight' => 2,
  );

  $items['filent/read'] = array(
    'title' => 'Read',
    'page callback' => 'pde_03_pcb_filent_read',
    'access callback' => TRUE,
    'weight' => 3,
  );

  $items['filent/update'] = array(
    'title' => 'Update',
    'page callback' => 'pde_03_pcb_filent_update',
    'access callback' => TRUE,
    'weight' => 4,
  );

  $items['filent/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'pde_03_pcb_filent_delete',
    'access callback' => TRUE,
    'weight' => 5,
  );

  $items['vocent'] = array(
    'title' => 'Vocabulary entities',
    'page callback' => 'pde_03_pcb_vocent_info',
    'access callback' => TRUE,
    'weight' => 2,
  );

  $items['vocent/create/ta'] = array(
    'title' => 'Create by TAPI',
    'page callback' => 'pde_03_pcb_vocent_create',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'weight' => 1,
  );

  $items['vocent/create/ea'] = array(
    'title' => 'Create by EAPI',
    'page callback' => 'pde_03_pcb_vocent_create',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'weight' => 2,
  );

  $items['vocent/read'] = array(
    'title' => 'Read',
    'page callback' => 'pde_03_pcb_vocent_read',
    'access callback' => TRUE,
    'weight' => 3,
  );

  $items['vocent/update'] = array(
    'title' => 'Update',
    'page callback' => 'pde_03_pcb_vocent_update',
    'access callback' => TRUE,
    'weight' => 4,
  );

  $items['vocent/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'pde_03_pcb_vocent_delete',
    'access callback' => TRUE,
    'weight' => 5,
  );

  return $items;
}


/**
 * Show info page for File Entity menu.
 */
function pde_03_pcb_filent_info() {
  pde_trace_funct();

  return t('Select file entity action from menu.');
}


/**
 * Page callback: create file entity.
 */
function pde_03_pcb_filent_create($op = 'fa') {
  pde_trace_funct();

  $cmd = '_pde_03_file_create_' . $op;

  $data = $cmd();
  // Wrapper is created using file entity (file object).
  _pde_03_file_wrapper_dpm($data);
  return 'Done';
}


/**
 * Page callback: read file entity.
 */
function pde_03_pcb_filent_read($fid = 1) {
  pde_trace_funct();

  // Wrapper will be created using file entity id.
  _pde_03_file_wrapper_dpm($fid);
  return 'Done';
}


/**
 * Page callback: update file entity.
 */
function pde_03_pcb_filent_update($fid = 1) {
  pde_trace_funct();

  _pde_03_file_update($fid);
  return 'Done';
}


/**
 * Page callback: delete file entity.
 */
function pde_03_pcb_filent_delete($fid = 1) {
  pde_trace_funct();

  _pde_03_file_delete($fid);
  return 'Done';
}


/**
 * Command: create file entity via File API.
 */
function _pde_03_file_create_fa() {
  $filename = 'helloworld.txt';
  $uri = 'public://' . $filename;
  $content = "Hello, world!\nI am Programming Drupal Entities!\n";
  $file = file_save_data($content, $uri, FILE_EXISTS_REPLACE);
  return $file;
}


/**
 * Command: create file entity via Entity API.
 */
function _pde_03_file_create_ea() {
  global $user;

  $filename = 'helloworld.txt';
  $uri = 'public://' . $filename;
  $content = "Hello, world!\nI am Programming Drupal Entities!\n";

  $uri = file_unmanaged_save_data($content, $uri, FILE_EXISTS_REPLACE);

  // Use entity properties for entity_create.
  // See also _pde_03_vocabulary_create_ea.
  $data = array(
    'fid' => NULL,
    'uri' => $uri,
    'filename' => drupal_basename($uri),
    'filemime' => file_get_mimetype($uri),
    'uid' => $user->uid,
    'status' => FILE_STATUS_PERMANENT,
  );

  // 'file' entity doesn't define 'creation callback' function and doesn't
  // implement EntityAPIControllerInterface, thus entity_create doesn't
  // work. See _entity_info_add_metadata in entity/entity.module file.
  $entity = entity_create('file', $data);
  return $entity;
}


/**
 * Present example of entity wrapper usage.
 */
function _pde_03_file_wrapper_dpm($data) {
  $wrapper = entity_metadata_wrapper('file', $data);
  // Compare dpm($data) and dpm($wrapper->getPropertyInfo()).
  // Some of the wrapper property names differ from the entity property names
  // (database field names). The values can be different between the wrapper
  // property and the entity property; so can the type. For example, the owner
  // wrapper property will be a user entity wrapper whereas the uid entity
  // property is just a numeric user ID.
  dpm($data);                            // stdClass.
  dpm($wrapper);                         // EntityDrupalWrapper
  dpm($wrapper->getPropertyInfo());

  // Accessing wrapper properties and corresponding entity fields:
  dpm($wrapper->value());                // stdClass (file object)

  dpm('fid');
  dpm($wrapper->value()->fid);
  dpm($wrapper->fid);                    // EntityValueWrapper
  dpm($wrapper->fid->value());

  dpm('filename');
  dpm($wrapper->value()->filename);
  dpm($wrapper->name);                   // EntityValueWrapper
  dpm($wrapper->name->value());

  dpm('uid');
  dpm($wrapper->value()->uid);
  dpm($wrapper->owner);                   // EntityDrupalWrapper
  dpm($wrapper->owner->value());          // stdClass (user object)
  dpm($wrapper->owner->getPropertyInfo());
  dpm($wrapper->owner->uid);              // EntityValueWrapper
  dpm($wrapper->owner->uid->value());     // EntityValueWrapper

  dpm('status');
  dpm($wrapper->value()->status);
  // No access via wrapper!
  // dpm($wrapper->status);
}


/**
 * Command: Update file entity.
 */
function _pde_03_file_update($fid = 1) {
  // entity_metadata_wrapper accepts entity object, entity id, ... what else?
  $wrapper = entity_metadata_wrapper('file', $fid);
  dpm($wrapper);                         // EntityDrupalWrapper
  dpm($wrapper->getPropertyInfo());

  dpm('Updating status...');
  $wrapper->value()->status = 0;

  dpm('Updating name...');
  // setter_callback are not set so the property can not be written.
  // $wrapper->name = 'helloworld1.txt';

  // It is possible to update the name directly.
  // Warning! The entity property name is different for file name.
  $wrapper->value()->filename = 'helloworld1.txt';
  // Verify the result.
  $tmp1 = $wrapper->value()->filename;
  $tmp2 = $wrapper->name->value();
  dpm($tmp1);              // 'helloworld1.txt'
  dpm($tmp2);              // 'helloworld1.txt'

  $wrapper->save();

  // Check the result.
  $entity = entity_load_unchanged('file', $fid);
  dpm($entity);

  // Alternative way - directly via entity?
  // $entity = entity_load_unchanged('file', $fid);
  // dpm($entity);                            // stdClass
  // $entity->status = 0;
  // $entity->save();
}


/**
 * Command: delete file entity.
 */
function _pde_03_file_delete($fid = 1) {
  $wrapper = entity_metadata_wrapper('file', $fid);
  $wrapper->delete();
}


/**
 * Show info page for vocabulary entity menu.
 */
function pde_03_pcb_vocent_info() {
  pde_trace_funct();

  return t('Select vocabulary entity action from menu.');
}


/**
 * Page callback: create vocabulary entity.
 */
function pde_03_pcb_vocent_create($op = 'ta') {
  pde_trace_funct();

  $cmd = '_pde_03_vocabulary_create_' . $op;

  $data = $cmd();
  // Wrapper is created using vocabulary entity (stdClass).
  _pde_03_vocabulary_wrapper_dpm($data);
  return 'Done';
}


/**
 * Page callback: read vocabulary entity.
 */
function pde_03_pcb_vocent_read() {
  pde_trace_funct();

  $vocabulary = taxonomy_vocabulary_machine_name_load('cuisine');
  _pde_03_vocabulary_read($vocabulary);
  return 'Done';
}


/**
 * Page callback: update vocabulary entity.
 */
function pde_03_pcb_vocent_update() {
  pde_trace_funct();

  $vocabulary = taxonomy_vocabulary_machine_name_load('cuisine');
  _pde_03_vocabulary_update($vocabulary);
  return 'Done';
}


/**
 * Page callback: delete vocabulary entity.
 */
function pde_03_pcb_vocent_delete() {
  pde_trace_funct();

  $vocabulary = taxonomy_vocabulary_machine_name_load('cuisine');
  _pde_03_vocabulary_delete($vocabulary);
  return 'Done';
}


/**
 * Command: create vocabulary entity by Taxonomy API.
 */
function _pde_03_vocabulary_create_ta() {
  $data = array(
    'name' => 'Cuisine',
    'machine_name' => 'cuisine',
    'description' => 'Contains terms representing different cuisines.',
  );

  taxonomy_vocabulary_save((object) $data);

  // 1. method
  // Retrieve the entity from db using entity wrapper and return it.
  $vocabularies = taxonomy_vocabulary_get_names();
  $vid = $vocabularies['cuisine']->vid;
  // dpm($vocabularies);
  // dpm($vid);
  $wrapper = entity_metadata_wrapper('taxonomy_vocabulary', $vid);

  // 2. method
  $vocabulary = taxonomy_vocabulary_machine_name_load('cuisine');
  // dpm($vocabulary);
  $wrapper = entity_metadata_wrapper('taxonomy_vocabulary', $vocabulary);
  return $wrapper->value();
}


/**
 * Command: create vocabulary entity by Entity API.
 */
function _pde_03_vocabulary_create_ea() {

  // Use entity properties (not wrapper properties) for entity_create.
  $data = array(
    'name' => 'Cuisine',
    'machine_name' => 'cuisine',
    'description' => 'Contains terms representing different cuisines.',
    'hierarchy' => 1,
  );

  // 'taxonomy vocabulary' entity doesn't implement
  // EntityAPIControllerInterface, but it supports 'creation callback'
  // function, so the entity can be created in this way.
  // Compare with _pde_03_file_create_ea above.
  $entity = entity_create('taxonomy_vocabulary', $data);      // stdClass
  dpm($entity);

  // Save adds remaining properties. Compare dpm($entity) before and after.
  $wrapper = entity_metadata_wrapper('taxonomy_vocabulary', $entity);
  $wrapper->save();

  return $entity;
}


/**
 * Command: read vocabulary entity.
 */
function _pde_03_vocabulary_read($vocabulary) {
  $wrapper = entity_metadata_wrapper('taxonomy_vocabulary', $vocabulary);
  _pde_03_vocabulary_wrapper_dpm($wrapper->value());
}


/**
 * Command: update vocabulary entity.
 */
function _pde_03_vocabulary_update($vocabulary) {
  $wrapper = entity_metadata_wrapper('taxonomy_vocabulary', $vocabulary);
  $wrapper->description = 'New description';
  $wrapper->save();
}


/**
 * Command: delete vocabulary entity.
 */
function _pde_03_vocabulary_delete($vocabulary) {
  $wrapper = entity_metadata_wrapper('taxonomy_vocabulary', $vocabulary);
  $wrapper->delete();
}


/**
 * Present example of entity wrapper usage.
 */
function _pde_03_vocabulary_wrapper_dpm($data) {
  $wrapper = entity_metadata_wrapper('taxonomy_vocabulary', $data);
  // Compare dpm($data) and dpm($wrapper->getPropertyInfo()).
  // Some of the wrapper property names differ from the entity property names
  // (database field names). The values can be different between the wrapper
  // property and the entity property; so can the type. For example, the owner
  // wrapper property will be a user entity wrapper whereas the uid entity
  // property is just a numeric user ID.
  dpm($data);                            // stdClass
  dpm($wrapper);                         // EntityDrupalWrapper
  dpm($wrapper->getPropertyInfo());

  // Accessing wrapper properties and corresponding entity fields:
  dpm($wrapper->value());                // stdClass (vocabulary object)

  dpm('vid');
  dpm($wrapper->value()->vid);
  dpm($wrapper->vid);                    // EntityValueWrapper
  dpm($wrapper->vid->value());

  dpm('name');
  dpm($wrapper->value()->name);
  dpm($wrapper->name);                   // EntityValueWrapper
  dpm($wrapper->name->value());

  dpm('description');
  dpm($wrapper->value()->description);
  dpm($wrapper->description);            // EntityValueWrapper
  dpm($wrapper->description->value());

  dpm('hierachy');
  dpm($wrapper->value()->hierarchy);
  // No access via wrapper!
  // dpm($wrapper->hierarchy);
}
