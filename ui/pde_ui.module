<?php

/**
 * @file
 * User Interface to test PDE entity examples.
 */

module_load_include('inc', 'pde', 'includes/tools');
module_load_include('inc', 'pde', 'includes/pde.cmd');


// @ignore sniffer_commenting_inlinecomment_spacingafter:file

/**
 * Implements hook_menu().
 */
function pde_ui_menu() {
  pde_trace_funct();

  $items = array();

  $items['pde'] = array(
    'title' => 'Entity',
    'page callback' => 'pde_ui_pcb_info',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  $items['pde/create'] = array(
    'title' => 'Create',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pde_ui_form_entity_create'),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
    'weight' => 1,
  );

  $items['pde/read'] = array(
    'title' => 'Read',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pde_ui_form_entity_read'),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
    'weight' => 2,
  );

  $items['pde/read/%/%'] = array(
    'title' => 'Read',
    'page callback' => 'pde_ui_pcb_entity_read',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['pde/update'] = array(
    'title' => 'Update',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pde_ui_form_entity_update'),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
    'weight' => 3,
  );

  $items['pde/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pde_ui_form_entity_delete'),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
    'weight' => 4,
  );

  return $items;
}


/**
 * Show info page for Entity menu.
 */
function pde_ui_pcb_info() {
  pde_trace_funct();

  return t('Select entity action from menu.');
}


/**
 * Form 'Entity create' constructor.
 */
function pde_ui_form_entity_create($form, &$form_state) {
  pde_trace_funct();

  $entities = array_keys(entity_get_info());

  $form = array();

  $form['entity_type'] = array(
    '#type' => 'textfield',
    '#title' => t('Entity type'),
    '#description' => t('Enter entity type. The following types are available: @entities',
        array('@entities' => implode(', ', $entities))),
  );

  $form['entity_data_json'] = array(
    '#type' => 'textfield',
    '#title' => t('Entity data'),
    '#description' => t('Enter entity data in JSON format, for example: {"name": "Salt"}'),
  );

  // Placeholder for decoded 'entity_data_json'
  $form['entity_data'] = array(
    '#type' => 'value',
    '#value' => array(),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create'),
  );

  return $form;
}


/**
 * From 'Entity create' validate handler.
 */
function pde_ui_form_entity_create_validate($form, &$form_state) {
  // dpm($form_state);
  if (($data = drupal_json_decode($form_state['values']['entity_data_json'])) == NULL) {
    form_set_error('entity_data_json', t('The JSON data cannot be decoded.'));
  }
  $form_state['values']['entity_data'] = $data;
}


/**
 * Form 'Entity create' submit handler.
 */
function pde_ui_form_entity_create_submit($form, &$form_state) {
  pde_trace_funct();
  // dpm($form_state);

  $type = $form_state['values']['entity_type'];
  $data = $form_state['values']['entity_data'];
  $wrapper = pde_cmd_entity_create($type, $data);
  $type = $wrapper->type();
  $id = $wrapper->getIdentifier();

  drupal_set_message(t('Entity created'));
  $form_state['redirect'] = "pde/read/$type/$id";
}


/**
 * Form 'Entity read' constructor.
 */
function pde_ui_form_entity_read($form, &$form_state) {
  pde_trace_funct();

  $form['entity_type'] = array(
    '#type' => 'select',
    '#title' => t('Entity type'),
    '#options' => _pde_ui_get_select_options(),
    '#description' => t('Select entity type.'),
  );

  $form['entity_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Entity id'),
    '#maxlength' => 10,
    '#size' => 5,
    '#element_validate' => array('element_validate_number'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Read'),
  );

  return $form;
}


/**
 * Form 'Entity read' submit handler.
 */
function pde_ui_form_entity_read_submit($form, &$form_state) {
  pde_trace_funct();

  $type = $form_state['values']['entity_type'];
  $id = $form_state['values']['entity_id'];

  $form_state['redirect'] = "pde/read/$type/$id";
}


/**
 * Read entity of given type and id.
 */
function pde_ui_pcb_entity_read($entity_type = NULL, $entity_id = NULL) {
  pde_trace_funct();

  if (!array_key_exists($entity_type, entity_get_info())) {
    return 'Please use the following path: /read/ENTITY/ID, for example /read/user/1';
  }

  return pde_cmd_entity_read($entity_type, $entity_id);
}


/**
 * Form 'Entity read' submit handler.
 */
function pde_ui_form_entity_update($form, &$form_state) {
  pde_trace_funct();

  $form['entity_type'] = array(
    '#type' => 'select',
    '#title' => t('Entity type'),
    '#options' => _pde_ui_get_select_options(),
    '#description' => t('Select entity type.'),
  );

  $form['entity_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Entity id'),
    '#maxlength' => 10,
    '#size' => 5,
    '#element_validate' => array('element_validate_number'),
  );

  $form['entity_data_json'] = array(
    '#type' => 'textfield',
    '#title' => t('Entity data'),
    '#description' => t('Enter entity data in JSON format, for example: {"name": "Salt"}'),
  );

  // Placeholder for decoded 'entity_data_json'
  $form['entity_data'] = array(
    '#type' => 'value',
    '#value' => array(),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update'),
  );

  return $form;
}


/**
 * From 'Entity update' validate handler.
 */
function pde_ui_form_entity_update_validate($form, &$form_state) {
  // dpm($form_state);
  if (($data = drupal_json_decode($form_state['values']['entity_data_json'])) == NULL) {
    form_set_error('entity_data_json', t('The JSON data cannot be decoded.'));
  }
  $form_state['values']['entity_data'] = $data;
}


/**
 * Form 'Entity update' submit handler.
 */
function pde_ui_form_entity_update_submit($form, &$form_state) {
  pde_trace_funct();

  $type = $form_state['values']['entity_type'];
  $id = $form_state['values']['entity_id'];
  $data = $form_state['values']['entity_data'];

  pde_cmd_entity_update($type, $id, $data);

  drupal_set_message(t('Entity updated'));
  $form_state['redirect'] = "pde/read/$type/$id";
}


/**
 * Form 'Entity delete' constructor.
 */
function pde_ui_form_entity_delete($form, &$form_state) {
  pde_trace_funct();

  $form['entity_type'] = array(
    '#type' => 'select',
    '#title' => t('Entity type'),
    '#options' => _pde_ui_get_select_options(),
    '#description' => t('Select entity type.'),
  );

  $form['entity_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Entity id'),
    '#maxlength' => 10,
    '#size' => 5,
    '#element_validate' => array('element_validate_number'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
  );

  return $form;
}


/**
 * Form 'Entity delete' submit handler.
 */
function pde_ui_form_entity_delete_submit($form, &$form_state) {
  pde_trace_funct();

  $type = $form_state['values']['entity_type'];
  $id = $form_state['values']['entity_id'];

  pde_cmd_entity_delete($type, $id);

  drupal_set_message(t('Entity deleted'));
  // $form_state['redirect'] = "pde/delete";
}


/**
 * Create array of entities' labels keyed by entity type.
 *
 * The array is used to fill '#options' parameter of 'select' element in forms.
 */
function _pde_ui_get_select_options() {
  $entities = entity_get_info();
  $options = array();
  foreach ($entities as $type => $data) {
    $options[$type] = $data['label'];
  }

  return $options;
}
