<?php

/**
 * @file
 * Contains example code demonstrating topics covered in Chapter 4.
 */

// @ignore sniffer_squiz_commenting_poststatementcomment_found:file
// @ignore sniffer_commenting_inlinecomment_spacingafter:file
// @ignore sniffer_commenting_inlinecomment_invalidendchar:file

module_load_include('inc', 'pde', 'includes/tools');

/**
 * Implements hook_menu().
 */
function pde_04_menu() {
  pde_trace_funct();

  $items = array();

  $items['nodent'] = array(
    'title' => 'Node entities',
    'page callback' => 'pde_04_pcb_nodent_info',
    'access callback' => TRUE,
    'weight' => 1,
  );

  $items['nodent/read'] = array(
    'title' => 'Read',
    'page callback' => 'pde_04_pcb_nodent_read',
    'access callback' => TRUE,
    'weight' => 1,
  );

  $items['comment'] = array(
    'title' => 'Comment entities',
    'page callback' => 'pde_04_pcb_comment_info',
    'access callback' => TRUE,
    'weight' => 2,
  );

  $items['comment/read'] = array(
    'title' => 'Read',
    'page callback' => 'pde_04_pcb_comment_read',
    'access callback' => TRUE,
    'weight' => 1,
  );

  $items['comment/update'] = array(
    'title' => 'Update',
    'page callback' => 'pde_04_pcb_comment_update',
    'access callback' => TRUE,
    'weight' => 2,
  );

  $items['terment'] = array(
    'title' => 'Term entities',
    'page callback' => 'pde_04_pcb_terment_info',
    'access callback' => TRUE,
    'weight' => 3,
  );

  $items['terment/create'] = array(
    'title' => 'Create',
    'page callback' => 'pde_04_pcb_terment_create',
    'access callback' => TRUE,
    'weight' => 1,
  );

  $items['terment/read'] = array(
    'title' => 'Read',
    'page callback' => 'pde_04_pcb_terment_read',
    'access callback' => TRUE,
    'weight' => 2,
  );

  $items['terment/update'] = array(
    'title' => 'Update',
    'page callback' => 'pde_04_pcb_terment_update',
    'access callback' => TRUE,
    'weight' => 3,
  );

  return $items;
}


/**
 * Show info page for Node Entity menu.
 */
function pde_04_pcb_nodent_info() {
  pde_trace_funct();

  return t('Select node entity action from menu.');
}


/**
 * Page callback: read node entity.
 */
function pde_04_pcb_nodent_read($nid = 1) {
  pde_trace_funct();

  // Wrapper will be created using node entity id.
  _pde_04_node_wrapper_dpm($nid);
  return 'Done';
}


/**
 * Present example of entity wrapper usage.
 */
function _pde_04_node_wrapper_dpm($data) {
  $wrapper = entity_metadata_wrapper('node', $data);
  // Compare dpm($data) and dpm($wrapper->getPropertyInfo()).
  // Some of the wrapper property names differ from the entity property names
  // (database field names). The values can be different between the wrapper
  // property and the entity property; so can the type. For example, the owner
  // wrapper property will be a user entity wrapper whereas the uid entity
  // property is just a numeric user ID.
  dpm($data);                            // stdClass.
  dpm($wrapper);                         // EntityDrupalWrapper
  dpm($wrapper->getPropertyInfo());

  // Accessing wrapper properties and corresponding entity fields:
  dpm($wrapper->value());                // stdClass (file object)

  dpm('body (field)');
  dpm($wrapper->value()->body);
  dpm($wrapper->body);                   // EntityStructureWrapper
  dpm($wrapper->body->value());
  dpm($wrapper->body->value);            // EntityValueWrapper
  dpm($wrapper->body->value->value());
}


/**
 * Show info page for Comment Entity menu.
 */
function pde_04_pcb_comment_info() {
  pde_trace_funct();

  return t('Select comment entity action from menu.');
}


/**
 * Page callback: read comment entity.
 */
function pde_04_pcb_comment_read($cid = 1) {
  pde_trace_funct();

  // Wrapper will be created using comment entity id.
  _pde_04_comment_wrapper_dpm($cid);
  return 'Done';
}


/**
 * Page callback: update comment entity.
 */
function pde_04_pcb_comment_update($cid = 1) {
  pde_trace_funct();

  // Wrapper will be created using comment entity id.
  _pde_04_comment_update($cid);
  return 'Done';
}


/**
 * Present example of entity wrapper usage.
 */
function _pde_04_comment_wrapper_dpm($data) {
  $wrapper = entity_metadata_wrapper('comment', $data);
  // Compare dpm($data) and dpm($wrapper->getPropertyInfo()).
  // Some of the wrapper property names differ from the entity property names
  // (database field names). The values can be different between the wrapper
  // property and the entity property; so can the type. For example, the owner
  // wrapper property will be a user entity wrapper whereas the uid entity
  // property is just a numeric user ID.
  dpm($data);                            // stdClass.
  dpm($wrapper);                         // EntityDrupalWrapper
  dpm($wrapper->getPropertyInfo());

  // Accessing wrapper properties and corresponding entity fields:
  dpm($wrapper->value());                // stdClass (file object)

  dpm('subject');
  dpm($wrapper->value()->subject);
  dpm($wrapper->subject);                // EntityValueWrapper
  dpm($wrapper->subject->value());

  dpm('comment_body (field)');
  dpm($wrapper->value()->comment_body);
  dpm($wrapper->comment_body);           // EntityStructureWrapper
  dpm($wrapper->comment_body->value());  // Array
  dpm($wrapper->comment_body->raw());    // Array
  dpm($wrapper->comment_body->value);    // EntityValueWrapper
  dpm($wrapper->comment_body->value->value());

  dpm('user');
  // dpm($wrapper->value()->author);
  dpm($wrapper->author);                 // EntityDrupalWrapper
  dpm($wrapper->author->value());        // stdClass
  dpm($wrapper->author->raw());          // uid
  dpm($wrapper->author->name);           // EntityValueWrapper
  dpm($wrapper->author->name->value());

  // !!!
  dpm('node');
  // dpm($wrapper->value()->node);
  dpm($wrapper->node);                   // EntityDrupalWrapper
  dpm($wrapper->node->value());          // stdClass
  dpm($wrapper->node->raw());            // nid
  dpm($wrapper->node->author);           // EntityDrupalWrapper
  dpm($wrapper->node->author->value());  // stdClass
  dpm($wrapper->node->author->raw());    // uid
  dpm($wrapper->node->author->name);     // EntityValueWrapper
  dpm($wrapper->node->author->name->value());
}


/**
 * Command: update comment.
 */
function _pde_04_comment_update($cid) {
  $wrapper = entity_metadata_wrapper('comment', $cid);
  // Change comment author to user1
  $wrapper->author = 9;
  $wrapper->save();
  // Change also related node author  (!!!)
  $wrapper->node->author = 9;
  $wrapper->node->save();
}


/**
 * Show info page for Term Entity menu.
 */
function pde_04_pcb_terment_info() {
  pde_trace_funct();

  return t('Select term entity action from menu.');
}


/**
 * Page callback: create term entity.
 */
function pde_04_pcb_terment_create() {
  pde_trace_funct();

  _pde_04_term_create();
  return 'Done';
}


/**
 * Page callback: read term entity.
 */
function pde_04_pcb_terment_read($tid = 1) {
  pde_trace_funct();

  // Wrapper will be created using term entity id.
  _pde_04_term_read($tid);
  return 'Done';
}


/**
 * Page callback: update term entity.
 */
function pde_04_pcb_terment_update($tid = 1) {
  pde_trace_funct();

  // Wrapper will be created using term entity id.
  _pde_04_term_update($tid);
  return 'Done';
}

/**
 * Command: create term.
 */
function _pde_04_term_create() {
  // Still don't know if wrapper or entity properties shall be used for
  // entity_create()... It seems that parameters used by traditional creation
  // functions shall be used. See taxonomy_term_save().
  $data = array(
    'name' => '',
    'vid' => 1,                          // Tags vocabulary
  );

  $data['name'] = 'Asia';
  $term = entity_create('taxonomy_term', $data);
  entity_save('taxonomy_term', $term);

  $data['name'] = 'Europa';
  $term = entity_create('taxonomy_term', $data);
  $wrapper = entity_metadata_wrapper('taxonomy_term', $term);
  $wrapper->save();
}


/**
 * Command: Read term.
 */
function _pde_04_term_read($data) {
  $wrapper = entity_metadata_wrapper('taxonomy_term', $data);
  // Compare dpm($data) and dpm($wrapper->getPropertyInfo()).
  // Some of the wrapper property names differ from the entity property names
  // (database field names). The values can be different between the wrapper
  // property and the entity property; so can the type. For example, the owner
  // wrapper property will be a user entity wrapper whereas the uid entity
  // property is just a numeric user ID.
  dpm($data);                            // stdClass.
  dpm($wrapper);                         // EntityDrupalWrapper
  dpm($wrapper->getPropertyInfo());

  // Accessing wrapper properties and corresponding entity fields:
  dpm($wrapper->value());                // stdClass (file object)

  dpm('vocabulary');
  // dpm($wrapper->value()->vocabulary);
  dpm($wrapper->vocabulary);                // EntityDrupalWrapper
  dpm($wrapper->vocabulary->value());       // stdClass
  dpm($wrapper->vocabulary->raw());
  dpm($wrapper->vocabulary->name);          // EntityValueWrapper
  dpm($wrapper->vocabulary->name->value());

  // !!!
  // Prepare a term which has a parent first, for example:
  // term/1 - Manager
  // term/2 - Team1 (has parent Manager)
  dpm('parent');
  // dpm($wrapper->value()->parent);
  dpm($wrapper->parent);                    // EntityListWrapper
  dpm($wrapper->parent->value());           // Array or empty
  if (is_array($wrapper->parent)) {
    dpm($wrapper->parent[0]);                 // EntityDrupalWrapper
    dpm($wrapper->parent[0]->getPropertyInfo());
    dpm($wrapper->parent[0]->name);
    dpm($wrapper->parent[0]->name->value());
    dpm($wrapper->parent[0]->vocabulary);     // EntityDrupalWrapper
    dpm($wrapper->parent[0]->vocabulary->name->value());
  }

  // Warining, parents_all includes this term itself!
  dpm('parents_all');
  // dpm($wrapper->value()->parent);
  dpm($wrapper->parents_all);               // EntityListWrapper
  dpm($wrapper->parents_all->value());          // Array or empty
  //dpm($wrapper->parents[0]);                 // EntityDrupalWrapper
}


/**
 * Command: update term.
 */
function _pde_04_term_update($tid) {
  $wrapper = entity_metadata_wrapper('taxonomy_term', $tid);

  // Clear the parent. Prepare the valid data before.
  $wrapper->parent = array(0);
  $wrapper->save();
}
