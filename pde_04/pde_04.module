<?php

/**
 * @file
 * Contains example code demonstrating topics covered in Chapter 4.
 */

// @ignore sniffer_squiz_commenting_poststatementcomment_found:file
// @ignore sniffer_commenting_inlinecomment_spacingafter:file
// @ignore sniffer_commenting_inlinecomment_invalidendchar:file

module_load_include('inc', 'pde', 'includes/tools');

/**
 * Implements hook_menu().
 */
function pde_04_menu() {
  pde_trace_funct();

  $items = array();

  $items['nodent'] = array(
    'title' => 'Node entities',
    'page callback' => 'pde_04_pcb_nodent_info',
    'access callback' => TRUE,
    'weight' => 1,
  );

  $items['nodent/read'] = array(
    'title' => 'Read',
    'page callback' => 'pde_04_pcb_nodent_read',
    'access callback' => TRUE,
    'weight' => 1,
  );

  $items['comment'] = array(
    'title' => 'Comment entities',
    'page callback' => 'pde_04_pcb_comment_info',
    'access callback' => TRUE,
    'weight' => 2,
  );

  $items['comment/read'] = array(
    'title' => 'Read',
    'page callback' => 'pde_04_pcb_comment_read',
    'access callback' => TRUE,
    'weight' => 1,
  );

  $items['comment/update'] = array(
    'title' => 'Update',
    'page callback' => 'pde_04_pcb_comment_update',
    'access callback' => TRUE,
    'weight' => 2,
  );

  $items['terment'] = array(
    'title' => 'Term entities',
    'page callback' => 'pde_04_pcb_terment_info',
    'access callback' => TRUE,
    'weight' => 3,
  );

  $items['terment/create'] = array(
    'title' => 'Create',
    'page callback' => 'pde_04_pcb_terment_create',
    'access callback' => TRUE,
    'weight' => 1,
  );

  $items['terment/read'] = array(
    'title' => 'Read',
    'page callback' => 'pde_04_pcb_terment_read',
    'access callback' => TRUE,
    'weight' => 2,
  );

  $items['terment/update'] = array(
    'title' => 'Update',
    'page callback' => 'pde_04_pcb_terment_update',
    'access callback' => TRUE,
    'weight' => 3,
  );

  return $items;
}


/**
 * Show info page for Node Entity menu.
 */
function pde_04_pcb_nodent_info() {
  pde_trace_funct();

  return t('Select node entity action from menu.');
}


/**
 * Page callback: read node entity.
 */
function pde_04_pcb_nodent_read($nid = 1) {
  pde_trace_funct();

  // Wrapper will be created using node entity id.
  _pde_04_node_wrapper_dpm($nid);
  return 'Done';
}


/**
 * Present example of entity wrapper usage.
 */
function _pde_04_node_wrapper_dpm($nid) {
  $wrapper = entity_metadata_wrapper('node', $nid);
  // Compare dpm($nid) and dpm($wrapper->getPropertyInfo()).
  // Some of the wrapper property names differ from the entity property names
  // (database field names). The values can be different between the wrapper
  // property and the entity property; so can the type. For example, the owner
  // wrapper property will be a user entity wrapper whereas the uid entity
  // property is just a numeric user ID.
  dpm($nid, 'nid');
  // EntityDrupalWrapper
  dpm($wrapper, 'wrapper');
  dpm($wrapper->type(), 'wrapper->type()');
  dpm($wrapper->label(), 'wrapper->label()');
  dpm($wrapper->getPropertyInfo(), 'wrapper->getPropertyInfo()');
  dpm($wrapper->value(), 'wrapper->value()');
  dpm($wrapper->raw(), 'wrapper->raw()');

  // Accessing fields
  dpm('field: body');
  dpm($wrapper->value()->body, 'wrapper->value()->body');

  // EntityStructureWrapper
  dpm($wrapper->body, 'wrapper->body');
  dpm($wrapper->body->type(), 'wrapper->body->type()');
  dpm($wrapper->body->label(), 'wrapper->body->label()');
  dpm($wrapper->body->value(), 'wrapper->body->value()');
  dpm($wrapper->body->raw(), 'wrapper->body->raw()');

  // Accessing field properties
  dpm($wrapper->body->value, 'wrapper->body->value');
  dpm($wrapper->body->value->type(), 'wrapper->body->value->type()');
  dpm($wrapper->body->value->label(), 'wrapper->body->value->label()');
  dpm($wrapper->body->value->value(), 'wrapper->body->value->value()');
  dpm($wrapper->body->value->raw(), 'wrapper->body->value->raw()');

  dpm('field: field_tags');
  dpm($wrapper->value()->field_tags, 'wrapper->value()->field_tags');

  // EntityListWrapper
  dpm($wrapper->field_tags, 'wrapper->field_tags');
  dpm($wrapper->field_tags->type(), 'wrapper->field_tags->type()');
  dpm($wrapper->field_tags->label(), 'wrapper->field_tags->label()');
  dpm($wrapper->field_tags->value(), 'wrapper->field_tags->value()');
  dpm($wrapper->field_tags->raw(), 'wrapper->field_tags->raw()');
  // field_tags is array od EntityDrupalWrapper objects
  dpm($wrapper->field_tags[0], 'wrapper->field_tags[0]');
  dpm($wrapper->field_tags[0]->getPropertyInfo(),
    'wrapper->field_tags[0]->getPropertyInfo()');

  dpm('field: field_file');
  dpm($wrapper->value()->field_file, 'wrapper->value()->field_file');

  // EntityStructureWrapper
  dpm($wrapper->field_file, 'wrapper->field_file');
  dpm($wrapper->field_file->type(), 'wrapper->field_file->type()');
  dpm($wrapper->field_file->label(), 'wrapper->field_file->label()');
  dpm($wrapper->field_file->value(), 'wrapper->field_file->value()');
  dpm($wrapper->field_file->raw(), 'wrapper->field_file->raw()');

  // Accessing field properties
  dpm($wrapper->field_file->file, 'wrapper->field_file->file');
  dpm($wrapper->field_file->file->type(), 'wrapper->field_file->file->type()');
  dpm($wrapper->field_file->file->label(), 'wrapper->field_file->file->label()');
  dpm($wrapper->field_file->file->value(), 'wrapper->field_file->file->value()');
  dpm($wrapper->field_file->file->raw(), 'wrapper->field_file->file->raw()');

  // Standard mechanism for comparison.
  dpm(node_load($nid), 'node_load($nid)');
  dpm(entity_load('node', array($nid)), 'entity_load("node", array($nid))');
  dpm(entity_load_single('node', $nid), 'entity_load_single("node", $nid)');
}


/**
 * Show info page for Comment Entity menu.
 */
function pde_04_pcb_comment_info() {
  pde_trace_funct();

  return t('Select comment entity action from menu.');
}


/**
 * Page callback: read comment entity.
 */
function pde_04_pcb_comment_read($cid = 1) {
  pde_trace_funct();

  // Wrapper will be created using comment entity id.
  _pde_04_comment_wrapper_dpm($cid);
  return 'Done';
}


/**
 * Page callback: update comment entity.
 */
function pde_04_pcb_comment_update($cid = 1) {
  pde_trace_funct();

  // Wrapper will be created using comment entity id.
  _pde_04_comment_update($cid);
  return 'Done';
}


/**
 * Present example of entity wrapper usage.
 */
function _pde_04_comment_wrapper_dpm($cid) {
  $wrapper = entity_metadata_wrapper('comment', $cid);
  // Compare dpm($data) and dpm($wrapper->getPropertyInfo()).
  // Some of the wrapper property names differ from the entity property names
  // (database field names). The values can be different between the wrapper
  // property and the entity property; so can the type. For example, the owner
  // wrapper property will be a user entity wrapper whereas the uid entity
  // property is just a numeric user ID.
  dpm($cid, 'cid');
  // EntityDrupalWrapper
  dpm($wrapper, 'wrapper');
  dpm($wrapper->type(), 'wrapper->type()');
  dpm($wrapper->label(), 'wrapper->label()');
  dpm($wrapper->getPropertyInfo(), 'wrapper->getPropertyInfo()');
  dpm($wrapper->value(), 'wrapper->value()');
  dpm($wrapper->raw(), 'wrapper->raw()');

  // Accessing properties
  dpm('property: subject');
  dpm($wrapper->value()->subject, '$wrapper->value()->subject');

  // EntityValueWrapper
  dpm($wrapper->subject, '$wrapper->subject');
  dpm($wrapper->subject->type(), 'wrapper->subject->type()');
  dpm($wrapper->subject->label(), 'wrapper->subject->label()');
  dpm($wrapper->subject->value(), 'wrapper->subject->value()');
  dpm($wrapper->subject->raw(), 'wrapper->subject->raw()');

  dpm('property: author');
  // dpm($wrapper->value()->author, 'wrapper->value()->author');
  // EntityDrupalWrapper
  dpm($wrapper->author, 'wrapper->author');
  dpm($wrapper->author->type(), 'wrapper->author->type()');
  dpm($wrapper->author->label(), 'wrapper->author->label()');
  dpm($wrapper->author->value(), 'wrapper->author->value()');
  dpm($wrapper->author->raw(), 'wrapper->author->raw()');

  dpm($wrapper->author->name, 'wrapper->author->name');
  dpm($wrapper->author->name->type(), 'wrapper->author->name->type()');
  dpm($wrapper->author->name->label(), 'wrapper->author->name->label()');
  dpm($wrapper->author->name->value(), 'wrapper->author->name->value()');
  dpm($wrapper->author->name->raw(), 'wrapper->author->name->raw()');

  dpm('property: node');
  // dpm($wrapper->value()->node, 'wrapper->value()->node');
  // EntityDrupalWrapper
  dpm($wrapper->node, 'wrapper->node');
  dpm($wrapper->node->type(), 'wrapper->node->type()');
  dpm($wrapper->node->label(), 'wrapper->node->label()');
  dpm($wrapper->node->value(), 'wrapper->node->value()');
  dpm($wrapper->node->raw(), 'wrapper->node->raw()');
  // EntityDrupalWrapper
  dpm($wrapper->node->author, 'wrapper->node->author');
  dpm($wrapper->node->author->type(), 'wrapper->node->author->type()');
  dpm($wrapper->node->author->label(), 'wrapper->node->author->label()');
  dpm($wrapper->node->author->value(), 'wrapper->node->author->value()');
  dpm($wrapper->node->author->raw(), 'wrapper->node->author->raw()');
  // EntityValueWrapper
  dpm($wrapper->node->author->name, 'wrapper->node->author->name');
  dpm($wrapper->node->author->name->type(), 'wrapper->node->author->name->type()');
  dpm($wrapper->node->author->name->label(), 'wrapper->node->author->name->label()');
  dpm($wrapper->node->author->name->value(), 'wrapper->node->author->name->value()');
  dpm($wrapper->node->author->name->raw(), 'wrapper->node->author->name->raw()');

  // Accessing fields
  dpm('field: comment_body');
  dpm($wrapper->value()->comment_body, 'wrapper->value()->comment_body');

  // EntityStructureWrapper
  dpm($wrapper->comment_body, 'wrapper->comment_body');
  dpm($wrapper->comment_body->type(), 'wrapper->comment_body->type()');
  dpm($wrapper->comment_body->label(), 'wrapper->comment_body->label()');
  dpm($wrapper->comment_body->value(), 'wrapper->comment_body->value()');
  dpm($wrapper->comment_body->raw(), 'wrapper->comment_body->raw()');

  // Accessing field properties
  dpm($wrapper->comment_body->value, 'wrapper->comment_body->value');
  dpm($wrapper->comment_body->value->type(), 'wrapper->comment_body->value->type()');
  dpm($wrapper->comment_body->value->label(), 'wrapper->comment_body->value->label()');
  dpm($wrapper->comment_body->value->value(), 'wrapper->comment_body->value->value()');
  dpm($wrapper->comment_body->value->raw(), 'wrapper->comment_body->value->raw()');

  // Standard mechanism for comparison.
  dpm(comment_load($cid), 'comment_load($cid)');
  dpm(entity_load('comment', array($cid)), 'entity_load("comment", array($cid))');
  dpm(entity_load_single('comment', $cid), 'entity_load_single("comment", $cid)');
}


/**
 * Command: update comment.
 */
function _pde_04_comment_update($cid) {
  $wrapper = entity_metadata_wrapper('comment', $cid);
  // Change comment author to user1
  $wrapper->author = 9;
  $wrapper->save();
  // Change also related node author  (!!!)
  $wrapper->node->author = 9;
  $wrapper->node->save();
}


/**
 * Show info page for Term Entity menu.
 */
function pde_04_pcb_terment_info() {
  pde_trace_funct();

  return t('Select term entity action from menu.');
}


/**
 * Page callback: create term entity.
 */
function pde_04_pcb_terment_create() {
  pde_trace_funct();

  _pde_04_term_create();
  return 'Done';
}


/**
 * Page callback: read term entity.
 */
function pde_04_pcb_terment_read($tid = 1) {
  pde_trace_funct();

  // Wrapper will be created using term entity id.
  _pde_04_term_read($tid);
  return 'Done';
}


/**
 * Page callback: update term entity.
 */
function pde_04_pcb_terment_update($tid = 1) {
  pde_trace_funct();

  // Wrapper will be created using term entity id.
  _pde_04_term_update($tid);
  return 'Done';
}

/**
 * Command: create term.
 */
function _pde_04_term_create() {
  // Still don't know if wrapper or entity properties shall be used for
  // entity_create()... It seems that parameters used by traditional creation
  // functions shall be used. See taxonomy_term_save().
  $data = array(
    'name' => '',
    'vid' => 1,
  );

  $data['name'] = 'Asia';
  $term = entity_create('taxonomy_term', $data);
  entity_save('taxonomy_term', $term);

  $data['name'] = 'Europa';
  $term = entity_create('taxonomy_term', $data);
  $wrapper = entity_metadata_wrapper('taxonomy_term', $term);
  $wrapper->save();
}


/**
 * Command: Read term.
 */
function _pde_04_term_read($tid) {
  $wrapper = entity_metadata_wrapper('taxonomy_term', $tid);
  // Compare dpm($data) and dpm($wrapper->getPropertyInfo()).
  // Some of the wrapper property names differ from the entity property names
  // (database field names). The values can be different between the wrapper
  // property and the entity property; so can the type. For example, the owner
  // wrapper property will be a user entity wrapper whereas the uid entity
  // property is just a numeric user ID.

  dpm($tid, 'tid');
  // EntityDrupalWrapper
  dpm($wrapper, 'wrapper');
  dpm($wrapper->type(), 'wrapper->type()');
  dpm($wrapper->label(), 'wrapper->label()');
  dpm($wrapper->getPropertyInfo(), 'wrapper->getPropertyInfo()');
  dpm($wrapper->value(), 'wrapper->value()');
  dpm($wrapper->raw(), 'wrapper->raw()');

  // Accessing properties
  dpm('property: vocabulary');
  // dpm($wrapper->value()->vocabulary, 'wrapper->value()->vocabulary');

  // EntityValueWrapper
  dpm($wrapper->vocabulary, 'wrapper->vocabulary');
  dpm($wrapper->vocabulary->type(), 'wrapper->vocabulary->type()');
  dpm($wrapper->vocabulary->label(), 'wrapper->vocabulary->label()');
  dpm($wrapper->vocabulary->value(), 'wrapper->vocabulary->value()');
  dpm($wrapper->vocabulary->raw(), 'wrapper->vocabulary->raw()');

  dpm($wrapper->vocabulary->name);
  dpm($wrapper->vocabulary->name->type(), 'wrapper->vocabulary->name->type()');
  dpm($wrapper->vocabulary->name->label(), 'wrapper->vocabulary->name->label()');
  dpm($wrapper->vocabulary->name->value(), 'wrapper->vocabulary->name->value()');
  dpm($wrapper->vocabulary->name->raw(), 'wrapper->vocabulary->name->raw()');

  // !!!
  // Prepare a term which has a parent first, for example:
  // term/1 - Manager
  // term/2 - Team1 (has parent Manager)
  dpm('property: parent');
  // dpm($wrapper->value()->parent);

  // EntityListWrapper
  dpm($wrapper->parent, '$wrapper->parent');
  dpm($wrapper->parent->type(), 'wrapper->parent->type()');
  dpm($wrapper->parent->label(), 'wrapper->parent->label()');
  dpm($wrapper->parent->value(), 'wrapper->parent->value()');
  dpm($wrapper->parent->raw(), 'wrapper->parent->raw()');

  if (is_array($wrapper->parent)) {
    // EntityDrupalWrapper
    dpm($wrapper->parent[0], 'wrapper->parent[0]');
    dpm($wrapper->parent[0]->getPropertyInfo(),
      'wrapper->parent[0]->getPropertyInfo()');
    dpm($wrapper->parent[0]->name, 'wrapper->parent[0]->name');
    dpm($wrapper->parent[0]->name->value(), 'wrapper->parent[0]->name->value()');
    dpm($wrapper->parent[0]->vocabulary, 'wrapper->parent[0]->vocabulary');
    dpm($wrapper->parent[0]->vocabulary->name->value(),
      'wrapper->parent[0]->vocabulary->name->value()');
  }

  // Warining, parents_all includes this term itself!
  dpm('parents_all');
  // dpm($wrapper->value()->parents_all);
  // EntityListWrapper
  dpm($wrapper->parents_all, 'wrapper->parents_all');
  dpm($wrapper->parents_all->value(), 'wrapper->parents_all->value()');
  dpm($wrapper->parents_all[0], 'wrapper->parents_all[0]');
}


/**
 * Command: update term.
 */
function _pde_04_term_update($tid) {
  $wrapper = entity_metadata_wrapper('taxonomy_term', $tid);

  // Clear the parent. Prepare the valid data before.
  $wrapper->parent = array(0);
  $wrapper->save();
}
